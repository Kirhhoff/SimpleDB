package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here

        this.predicate = p;

        resetChildren(child1, child2);
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here

        return predicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here

        return outerFiledName;
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here

        return innerFieldName;
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here

        return mergedTd;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here

        outerChild.open();
        innerChild.open();

        // prepare outer tuple such that
        // later we only iterate over inner tuple
        // and update outer until it's necessary
        if (!outerChild.hasNext())
            throw new NoSuchElementException();

        outerTuple = outerChild.next();

        super.open();
    }

    public void close() {
        // some code goes here

        super.close();
        outerChild.close();
        innerChild.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here

        outerChild.rewind();
        innerChild.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here

        Tuple innerTuple;
        while (true) {
            // if inner loop reaches its end,
            // outer steps forward and inner rewinds
            if (!innerChild.hasNext()) {
                if (!outerChild.hasNext())
                    break;

                outerTuple = outerChild.next();

                innerChild.rewind();
                if (!innerChild.hasNext())
                    break;
            }

            innerTuple = innerChild.next();
            if (predicate.filter(outerTuple, innerTuple))
                return concatenate(innerTuple);
        }

        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here

        return new OpIterator[]{outerChild, innerChild};
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here

        if (children.length < 2)
            return;

        resetChildren(children[0], children[1]);
    }

    private final JoinPredicate predicate;
    private OpIterator outerChild, innerChild;
    private String outerFiledName, innerFieldName;
    private int outerNumFields, innerNumFields;
    private TupleDesc mergedTd;
    private Tuple outerTuple;

    private void resetChildren(OpIterator left, OpIterator right) {

        this.outerChild = left;
        this.innerChild = right;

        TupleDesc outerTd = left.getTupleDesc();
        TupleDesc innerTd = innerChild.getTupleDesc();

        this.outerFiledName = outerTd.getFieldName(predicate.getField1());
        this.innerFieldName = innerTd.getFieldName(predicate.getField2());
        this.outerNumFields = outerTd.numFields();
        this.innerNumFields = innerTd.numFields();
        this.mergedTd = TupleDesc.merge(outerTd, innerTd);
    }

    private Tuple concatenate(Tuple innerTuple) {
        Tuple ret = new Tuple(mergedTd);

        for (int i = 0; i < outerNumFields; i++)
            ret.setField(i, outerTuple.getField(i));

        for (int i = 0; i < innerNumFields; i++)
            ret.setField(outerNumFields + i, innerTuple.getField(i));

        return ret;
    }
}